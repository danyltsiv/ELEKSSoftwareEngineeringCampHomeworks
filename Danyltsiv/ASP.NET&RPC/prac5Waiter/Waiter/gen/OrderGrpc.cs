// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Order.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Order {
  public static class Waiter
  {
    static readonly string __ServiceName = "order.Waiter";

    static readonly Marshaller<global::Order.OrderRequest> __Marshaller_OrderRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Order.OrderRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Order.OrderReply> __Marshaller_OrderReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Order.OrderReply.Parser.ParseFrom);

    static readonly Method<global::Order.OrderRequest, global::Order.OrderReply> __Method_informOrder = new Method<global::Order.OrderRequest, global::Order.OrderReply>(
        MethodType.Unary,
        __ServiceName,
        "informOrder",
        __Marshaller_OrderRequest,
        __Marshaller_OrderReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Order.OrderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Waiter</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface IWaiterClient
    {
      global::Order.OrderReply informOrder(global::Order.OrderRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Order.OrderReply informOrder(global::Order.OrderRequest request, CallOptions options);
      AsyncUnaryCall<global::Order.OrderReply> informOrderAsync(global::Order.OrderRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Order.OrderReply> informOrderAsync(global::Order.OrderRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of Waiter</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface IWaiter
    {
      global::System.Threading.Tasks.Task<global::Order.OrderReply> informOrder(global::Order.OrderRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of Waiter</summary>
    public abstract class WaiterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Order.OrderReply> informOrder(global::Order.OrderRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Waiter</summary>
    #pragma warning disable 0618
    public class WaiterClient : ClientBase<WaiterClient>, IWaiterClient
    #pragma warning restore 0618
    {
      public WaiterClient(Channel channel) : base(channel)
      {
      }
      public WaiterClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected WaiterClient() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected WaiterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Order.OrderReply informOrder(global::Order.OrderRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return informOrder(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Order.OrderReply informOrder(global::Order.OrderRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_informOrder, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Order.OrderReply> informOrderAsync(global::Order.OrderRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return informOrderAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Order.OrderReply> informOrderAsync(global::Order.OrderRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_informOrder, null, options, request);
      }
      protected override WaiterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WaiterClient(configuration);
      }
    }

    /// <summary>Creates a new client for Waiter</summary>
    public static WaiterClient NewClient(Channel channel)
    {
      return new WaiterClient(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(IWaiter serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_informOrder, serviceImpl.informOrder).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(WaiterBase serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_informOrder, serviceImpl.informOrder).Build();
    }

  }
}
#endregion
